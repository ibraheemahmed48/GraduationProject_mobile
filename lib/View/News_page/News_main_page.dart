import 'dart:io';import 'package:cached_network_image/cached_network_image.dart';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/material.dart';import 'package:flutter_svg/svg.dart';import 'package:get/get.dart';import 'package:loading_animation_widget/loading_animation_widget.dart';import 'package:notificationsystem_mobile/controler/auth/Account.dart';import 'package:notificationsystem_mobile/controler/method.dart';import 'package:url_launcher/url_launcher.dart';import '../../help/Colors.dart';import '../../help/text_style.dart';import '../Widgetpage/ImagePage.dart';import '../Widgetpage/RefreshIcon2.dart';import 'Divider.dart';class News_main_page extends StatefulWidget {  const News_main_page({Key? key}) : super(key: key);  @override  State<News_main_page> createState() => _News_main_pageState();}class _News_main_pageState extends State<News_main_page> {  final ScrollController _scrollController = ScrollController();  RxBool toggle_offset = false.obs;  @override  void initState() {    print("--------------------------News_main_page-------------------------------");    _scrollController.addListener(() {      print(_scrollController.offset);      print("toggle_offset ${toggle_offset}");      if(_scrollController.offset> 100){        toggle_offset.value=true;        print("toggle_offset ${toggle_offset}");      }else{        toggle_offset.value=false;        print("toggle_offset ${toggle_offset}");      }    });    // TODO: implement initState    super.initState();    Future.delayed(const Duration(milliseconds: 150),(){      _scrollController.jumpTo(Methods.controller_Offset_news!);    });    Future.delayed(const Duration(seconds: 2),(){      Methods.controller_Offset_news = 0;    });  }  RxBool openImage = false.obs;  static RxString imageurl = "".obs;  Uri? _url;  @override  Widget build(BuildContext context) {    return Stack(      children: [        Padding(          padding: const EdgeInsets.all(8.0),          child: Obx(                  () {                return Methods.getlocaldata == true ? Center(                  child: Column(                    mainAxisAlignment: MainAxisAlignment.start,                    children: [                      Row(                        mainAxisAlignment: MainAxisAlignment.spaceAround,                        children: [                          Text(                            "MTCE",                            style: Text_Style.getstyle(                              fontWeight: FontWeight.w500,                              ColorText: Colorsapp.mainColor,                              fontsize: MediaQuery                                  .of(context)                                  .size                                  .width / 15,                            ),                          ),                          Text(                            " اخبار المرحلة ${Account.stage}",                            style: Text_Style.getstyle(                              fontWeight: FontWeight.w500,                              ColorText: Colorsapp.mainColor,                              fontsize: MediaQuery                                  .of(context)                                  .size                                  .width / 15,                            ),                          ),                        ],                      ),                      MyDivider1(                        width: MediaQuery                            .of(context)                            .size                            .width / 1.1,                        height: 3,                      ),                      const SizedBox(                        height: 10,                      ),                      /////////////////////////Obx//////////////////                      Obx(() {                        return Methods.news_post.value == true ?                        Methods.newsList.isNotEmpty ?                        Expanded(                          child: ListView.builder(                            controller: _scrollController,                              reverse: false,                              itemCount: Methods.newsList.value.length, itemBuilder:                                  (BuildContext context, int index) {                                    final newsIndex = Methods.newsList.value.length - index - 1;                                    return Padding(                                  padding: const EdgeInsets.symmetric(vertical: 5),                                  child: Card(                                      elevation: 3,                                      shape: RoundedRectangleBorder(                                        borderRadius: BorderRadius.circular(10.0),                                      ),                                      child: Container(                                    width:                                    MediaQuery                                    .of(context)                                    .size                                    .width /                                    1.1,                                    //height: 500,                                    decoration: BoxDecoration(                                    borderRadius: BorderRadius.circular(10),                                    color: Colorsapp.TextColor),                                    child: Column(                                  children: [                                    Container(                                  height: MediaQuery                                      .of(context)                                      .size                                      .height /                                      20,                                  padding: const EdgeInsets.all(5),                                  decoration: BoxDecoration(                                      borderRadius:                                      BorderRadius.circular(10),                                      border: Border.all(                                          color:                                          Colorsapp.mainColor,                                          width: 2),                                      color: Colorsapp.White),                                  child: Row(                                    mainAxisAlignment:                                    MainAxisAlignment.end,                                    children: [                                      Expanded(                                          child: Directionality(                                            textDirection:                                            TextDirection.rtl,                                            child: ListView.builder(                                                scrollDirection:                                                Axis.horizontal,                                                itemCount: Methods.newsList.value[newsIndex]["Stages"].length,                                                itemBuilder: (BuildContextcontext, int StagesIndex) {                                                  return Padding(                                                    padding:                                                    const EdgeInsets                                                        .only(                                                        top: 4),                                                    child: Text(                                                      "| ${Methods.newsList                                                          .value[newsIndex]["Stages"][StagesIndex]}",                                                      textDirection:                                                      TextDirection                                                          .ltr,                                                      style: Text_Style                                                          .getstyle(                                                        fontWeight:                                                        FontWeight                                                            .w500,                                                        ColorText: Colorsapp                                                            .SecondColor,                                                        fontsize: MediaQuery                                                            .of(                                                            context)                                                            .size                                                            .width /                                                            22,                                                      ),                                                    ),                                                  );                                                }),                                          )),                                      Text(                                        " : المرحلة",                                        textDirection:                                        TextDirection.ltr,                                        style: Text_Style.getstyle(                                          fontWeight:                                          FontWeight.w700,                                          ColorText:                                          Colorsapp.mainColor,                                          fontsize:                                          MediaQuery                                              .of(context)                                              .size                                              .width /                                              20,                                        ),                                      ),                                    ],                                  ),                                    ),                                    Padding(                                  padding:                                  const EdgeInsets.all(8.0),                                  child: Align(                                      alignment:                                      Alignment.centerRight,                                      child: Text(                                        textAlign: TextAlign.right,                                        Methods.newsList                                            .value[newsIndex]["Title"]                                            .toString(),                                        textDirection:                                        TextDirection.rtl,                                        style: Text_Style.getstyle(                                          fontWeight:                                          FontWeight.w600,                                          ColorText:                                          Colorsapp.redColor,                                          fontsize:                                          MediaQuery                                              .of(context)                                              .size                                              .width /                                              20,                                        ),                                      )),                                    ),                                    if (Methods.newsList.value[newsIndex]["Images"].isNotEmpty)                                  Container(                                      width: MediaQuery                                          .of(context)                                          .size                                          .width,                                      height: 300,                                      child: Methods.newsList.value[newsIndex]["Images"].length>1?Directionality(                                          textDirection:                                          TextDirection.rtl,                                          child: ListView.builder(                                            itemCount: Methods.newsList                                                .value[newsIndex]["Images"]                                                .length,                                            scrollDirection: Axis                                                .horizontal,                                            itemBuilder: (                                                BuildContextcontext,                                                int index2) {                                              return Padding(                                                padding:                                                const EdgeInsets.all(5.0),                                                child: Container(                                                    decoration: BoxDecoration(                                                        color: Colors                                                            .white,                                                        borderRadius:                                                        BorderRadius                                                            .circular(                                                            10),                                                        border: Border.all(                                                            color: Colorsapp                                                                .mainColor,                                                            width:                                                            2)),                                                    child:                                                    GestureDetector(                                                      onTap: () {                                                        print("Methods.controller_Offset >>${Methods.controller_Offset_news}");                                                        Methods.controller_Offset_news = _scrollController?.offset;                                                        print("Methods.controller_Offset>>>> >>${Methods.controller_Offset_news}");                                                        // print(Methods.newsList.value[newsIndex]["Images"][index2].indexOf(Methods.newsList.value[newsIndex]["Images"].toString()));                                                       // print(Methods.newsList.value[newsIndex]["Images"][index2].toString());                                                      int indexof =0;                                                      String Images = "";                                                      Images = Methods.newsList.value[newsIndex]["Images"][index2].toString();                                                      //print("Url : ${Images}");                                                       for (int i = 0; i < Methods.newsList.value[newsIndex]["Images"].length; i++) {                                                         print("Url ${i} :${Methods.newsList.value[newsIndex]["Images"][i]}");                                                         if(Methods.newsList.value[newsIndex]["Images"][i] == Images){                                                           print("pppp ${i}");                                                           indexof = i;                                                         }                                                       }                                                      print("indexof :  $indexof");                                                        openImage.value = true;                                                        imageurl.value = Methods.newsList.value[newsIndex]["Images"][index2].toString();                                                        Get.to(ImagePage(                                                          imageUrls: Methods.newsList.value[newsIndex]["Images"],                                                          time: '  ${Methods.newsList.value[newsIndex]["time"].toString()}',                                                          title: 'الاخبار',                                                          indexOF: indexof,),                                                          transition: Transition.fadeIn,);                                                      },                                                      child: ClipRRect(                                                          borderRadius:                                                          BorderRadius                                                              .circular(                                                              8),                                                          child: CachedNetworkImage(                                                            imageUrl: Methods.newsList.value[newsIndex]["Images"][index2].toString(),                                                            fit: BoxFit                                                                .contain,                                                            fadeInDuration: const Duration(                                                                seconds: 1),                                                            errorWidget: (                                                                context,                                                                url,                                                                error) {                                                              return Container(                                                                height: 300,                                                                width: 200,                                                                child: Icon(                                                                  Icons                                                                      .image_not_supported,                                                                  size: MediaQuery                                                                      .of(                                                                      context)                                                                      .size                                                                      .width /                                                                      4,                                                                  color: Colors                                                                      .blueGrey                                                                      .withOpacity(                                                                      0.3),                                                                ),                                                              );                                                            },                                                          )                                                      ),                                                    )                                                ),                                              );                                            },                                          )                                      ): SizedBox(                                        width: MediaQuery.of(context).size.width,                                        height: 300,                                        child: Padding(                                          padding:                                          const EdgeInsets.all(5.0),                                          child: Container(                                              decoration: BoxDecoration(                                                  color: Colors                                                      .white,                                                  borderRadius:                                                  BorderRadius.circular(                                                      10),                                                  border: Border.all(                                                      color: Colorsapp                                                          .mainColor,                                                      width:                                                      2)),                                              child:                                              GestureDetector(                                                onTap: (){                                                  print("Methods.controller_Offset >>${Methods.controller_Offset_news}");                                                  Methods.controller_Offset_news = _scrollController?.offset;                                                  print("Methods.controller_Offset>>>> >>${Methods.controller_Offset_news}");                                                  print(Methods.newsList.value[newsIndex]["Images"][0]);                                                  openImage.value = true;                                                  imageurl.value = Methods.newsList.value[newsIndex]["Images"][0].toString();                                                  Get.to(ImagePage(imageUrls: Methods.newsList.value[newsIndex]["Images"],                                                    time: '  ${Methods.newsList                                                        .value[newsIndex]["time"]                                                        .toString()}',                                                    title: 'الاخبار', indexOF: 0,),transition: Transition.fadeIn);                                                },                                                child: ClipRRect(                                                    borderRadius:                                                    BorderRadius.circular(                                                        8),                                                    child: CachedNetworkImage(                                                      imageUrl: Methods.newsList.value[newsIndex]["Images"][0].toString(),                                                      fit:BoxFit.contain,                                                      fadeInDuration: Duration(seconds: 1),                                                      errorWidget: (context, url, error) {                                                        return SizedBox(                                                          height: 300,                                                          width: 200,                                                          child: Icon(Icons.image_not_supported,                                                            size: MediaQuery.of(context).size.width/4,                                                            color: Colors.blueGrey.withOpacity(0.3),                                                          ),                                                        );                                                      },                                                    )                                                ),                                              )),                                        ),                                      ),                                  ),                                    Padding(                                  padding:                                  const EdgeInsets.all(8.0),                                  child: Align(                                      alignment:                                      Alignment.centerRight,                                      child: Text(                                        textAlign: TextAlign.right,                                        Methods.newsList                                            .value[newsIndex]["body"]                                            .toString(),                                        textDirection:                                        TextDirection.rtl,                                        style: Text_Style.getstyle(                                          fontWeight:                                          FontWeight.w500,                                          ColorText:                                          Colorsapp.mainColor,                                          fontsize:                                          MediaQuery                                              .of(context)                                              .size                                              .width /                                              25,                                        ),                                      )),                                    ),                                    if (Methods.newsList                                    .value[newsIndex]["Link"].isNotEmpty)                                  Align(                                    alignment:                                    Alignment.centerLeft,                                    child: TextButton(                                      child: Text(                                        textDirection: TextDirection.rtl,                                        Methods.newsList                                            .value[newsIndex]["Link"]                                            .toString(),                                        style: TextStyle(                                          color: Colors.blue,                                          decoration:                                          TextDecoration                                              .underline,                                          fontSize: MediaQuery                                              .of(                                              context)                                              .size                                              .width /                                              30,                                        ),                                      ),                                      onPressed: () async {                                        _url = Uri.parse(                                            Methods.newsList                                                .value[newsIndex]["Link"]                                                .toString());                                        if (!await launchUrl(                                            _url!)) {                                          throw 'Could not launch $_url';                                        }                                      },                                    ),                                  ),                                    Align(                                    alignment:                                    Alignment.centerLeft,                                    child: Text(                                      "  ${Methods.newsList                                          .value[newsIndex]["time"]                                          .toString()}",                                      textDirection:                                      TextDirection.ltr,                                      style: Text_Style.getstyle(                                        fontWeight:                                        FontWeight.w400,                                        ColorText:                                        Colorsapp.redColor,                                        fontsize:                                        MediaQuery                                            .of(context)                                            .size                                            .width / 27,                                      ),                                    )                                    ),                                    Container(                                 height: MediaQuery.of(context).size.height / 20,                                  padding: const EdgeInsets.all(0),                                  decoration: BoxDecoration(                                      borderRadius:                                      const BorderRadius.only(                                    topRight:                                    Radius.circular(10),                                    topLeft:                                    Radius.circular(10),                                        bottomRight:                                        Radius.circular(10),                                        bottomLeft:                                        Radius.circular(10),                                      ),                                    //   border: Border(                                    //   bottom: BorderSide(                                    //                                    // color: Colorsapp.mainColor.withOpacity(0.7),                                    // width: 2.0,                                    //     style: BorderStyle.solid                                    // ),),                                      color: Colorsapp.White),                                  child: Row(                                    mainAxisAlignment: MainAxisAlignment.spaceBetween,                                    crossAxisAlignment: CrossAxisAlignment.center,                                    children: [                                      Row(                                           children:  [                                             IconButton(                                               icon:  Obx(                                                 () {                                                   return Icon(                                                           Icons.thumb_up,                                                           size: 20,                                                           color: Methods.news_listlikesflag[newsIndex] == true ?                                                           Colors.blue :                                                           Colorsapp.TextColor,                                                         );                                                 }                                               ),                                               onPressed: () async {                                                 try {                                                   final result = await InternetAddress.lookup('example.com');                                                   if (result.isNotEmpty && result[0].rawAddress.isNotEmpty) {                                                     print("////////////////InternetAddress/////////////////////");                                                     if (Methods.news_listlikesflag[newsIndex] == false) {                                                       Methods.news_listlikesflag[newsIndex] = true;                                                       Methods.news_listfavoritesflag[newsIndex] = false;                                                       Methods.news_listdislikesflag[newsIndex] = false;                                                       await FirebaseFirestore.instance.collection('News').doc(Methods.newsList[newsIndex].id)                                                           .update({                                                         'likes': FieldValue                                                             .arrayUnion([                                                           Account.documentID                                                         ])                                                       });                                                       await FirebaseFirestore.instance.collection('News').doc(Methods.newsList[newsIndex].id)                                                           .update({                                                         'dislikes': FieldValue                                                             .arrayRemove([                                                           Account.documentID                                                         ])                                                       });                                                       await FirebaseFirestore.instance.collection('News').doc(Methods.newsList[newsIndex].id)                                                           .update({                                                         'favorites': FieldValue                                                             .arrayRemove([                                                           Account.documentID                                                         ])                                                       });                                                     } else {                                                       Methods.news_listlikesflag[newsIndex] = false;                                                       await FirebaseFirestore.instance.collection('News').doc(Methods.newsList[newsIndex].id)                                                           .update({                                                         'likes': FieldValue                                                             .arrayRemove([                                                           Account.documentID                                                         ])                                                       });                                                     }                                                   }                                                 } on SocketException catch (_) {                                                   print("////////////////No InternetAddress/////////////////////");                                                 }                                               },                                             ),                                             Text(                                              "${Methods.newsList[newsIndex]["likes"].length}",                                               style: TextStyle(                                                 color: Colorsapp.mainColor,                                                 fontSize: MediaQuery.of(context).size.width / 27,                                                 fontWeight: FontWeight.w500,                                               ),                                             ),                                             IconButton(                                               icon: Obx(                                                       () {                                                     return Icon(                                                       Icons.thumb_down,                                                       size: 20,                                                       color: Methods.news_listdislikesflag[newsIndex] == true ? Colors.lightBlue : Colorsapp.TextColor,                                                     );                                                   }                                               ),                                               onPressed: ()  async {                                                 try {                                                   final result = await InternetAddress.lookup('example.com');                                                   if (result.isNotEmpty && result[0].rawAddress.isNotEmpty) {                                                     print("////////////////InternetAddress/////////////////////");                                                     if (Methods.news_listdislikesflag[newsIndex] == false) {                                                       Methods.news_listdislikesflag[newsIndex] = true;                                                       Methods.news_listfavoritesflag[newsIndex] = false;                                                       Methods.news_listlikesflag[newsIndex] = false;                                                       await FirebaseFirestore.instance.collection('News').doc(Methods.newsList[newsIndex].id).update({                                                         'dislikes': FieldValue                                                             .arrayUnion([                                                           Account.documentID                                                         ])                                                       });                                                       await FirebaseFirestore.instance.collection('News').doc(Methods.newsList[newsIndex].id)                                                           .update({                                                         'likes': FieldValue                                                             .arrayRemove([                                                           Account.documentID                                                         ])                                                       });                                                       await FirebaseFirestore.instance.collection('News').doc(Methods.newsList[newsIndex].id)                                                           .update({                                                         'favorites': FieldValue                                                             .arrayRemove([                                                           Account.documentID                                                         ])                                                       });                                                     } else {                                                       Methods.news_listdislikesflag[newsIndex] = false;                                                       await FirebaseFirestore.instance.collection('News').doc(Methods.newsList[newsIndex].id)                                                           .update({                                                         'dislikes': FieldValue                                                             .arrayRemove([                                                           Account.documentID                                                         ])                                                       });                                                     }                                                   }                                                 } on SocketException catch (_) {                                                   print("////////////////No InternetAddress/////////////////////");                                                 }                                               },                                             ),                                             Text(                                               "${Methods.newsList[newsIndex]["dislikes"].length}",                                               style: TextStyle(                                                 color: Colorsapp.mainColor,                                                 fontSize: MediaQuery.of(context).size.width / 27,                                                 fontWeight: FontWeight.w500,                                               ),                                             ),                                             IconButton(                                                 icon: Obx(                                                         () {                                                       return Icon(                                                         Icons.favorite,                                                         size: 20,                                                         color: Methods.news_listfavoritesflag[newsIndex] == true                                                             ? Colorsapp.redColor                                                             : Colorsapp.TextColor,                                                       );                                                     }                                                 ),                                                 onPressed:                                                     () async {                                                   try {                                                     final result = await InternetAddress.lookup('example.com');                                                     if (result.isNotEmpty && result[0].rawAddress.isNotEmpty) {                                                       print("////////////////InternetAddress/////////////////////");                                                       if (Methods.news_listfavoritesflag[newsIndex] == false) {                                                         Methods.news_listfavoritesflag[newsIndex] = true;                                                         Methods.news_listlikesflag[newsIndex] = false;                                                         Methods.news_listdislikesflag[newsIndex] = false;                                                         await FirebaseFirestore.instance.collection('News').doc(                                                             Methods.newsList[newsIndex].id)                                                             .update({                                                           'favorites': FieldValue                                                               .arrayUnion([                                                             Account.documentID                                                           ])                                                         });                                                         await FirebaseFirestore.instance.collection('News').doc(                                                             Methods.newsList[newsIndex].id).update({                                                           'dislikes': FieldValue                                                               .arrayRemove([                                                             Account.documentID                                                           ])                                                         });                                                         await FirebaseFirestore.instance.collection('News').doc(                                                             Methods.newsList[newsIndex].id)                                                             .update({                                                           'likes': FieldValue                                                               .arrayRemove([                                                             Account.documentID                                                           ])                                                         });                                                       } else {                                                         Methods.news_listfavoritesflag[newsIndex] = false;                                                         await FirebaseFirestore.instance.collection('News').doc(                                                             Methods.newsList[newsIndex].id)                                                             .update({                                                           'favorites': FieldValue                                                               .arrayRemove([                                                             Account.documentID                                                           ])                                                         });                                                       }                                                     }                                                   } on SocketException catch (_) {                                                     print("////////////////No InternetAddress/////////////////////");                                                   }                                                 }),                                             Text(                                               "${Methods.newsList[newsIndex]["favorites"].length}",                                               style: TextStyle(                                                 color: Colorsapp.mainColor,                                                 fontSize: MediaQuery.of(context).size.width / 27,                                                 fontWeight: FontWeight.w500,                                               ),                                             ),                                           ],                                         ),                                      Padding(                                    padding:                                    const EdgeInsets.only(                                        right: 8, top: 0),                                    child: Text(                                      "${Methods.newsList[newsIndex]["author"].toString()}".substring(0, (Methods.newsList.value[newsIndex]["author"].toString().length > 20)                                          ? 20 :                                     (Methods.newsList[newsIndex]["author"].toString().length)                                      ),                                      textDirection:                                      TextDirection                                          .rtl,                                      style: Text_Style                                          .getstyle(                                        fontWeight:                                        FontWeight                                            .w600,                                        ColorText:                                        Colorsapp                                            .redColor,                                        fontsize: MediaQuery                                            .of(                                            context)                                            .size                                            .width /                                            25,                                      ),                                    ),                                      ),                                    ],                                  ),                                    ),                                  ],                                    ),                                  )),                                );                              }),                        )                            : Column(                          children: [                            SizedBox(                                width: MediaQuery                                    .of(context)                                    .size                                    .width / 1.2,                                height: MediaQuery                                    .of(context)                                    .size                                    .height / 2,                                child: SvgPicture.asset(                                  "photo/No data-cuate2.svg",                                )),                            Text(                              "لا يوجد اخبار",                              style: Text_Style.getstyle(                                fontWeight: FontWeight.w700,                                ColorText: Colorsapp.mainColor,                                fontsize:                                MediaQuery                                    .of(context)                                    .size                                    .width / 15,                              ),                            ),                            const RefreshIcon2()                          ],                        )                            : Padding(                          padding: EdgeInsets.only(                              top: MediaQuery                                  .of(context)                                  .size                                  .height / 2.8),                          child: Center(                            child: LoadingAnimationWidget.flickr(                              size: 100,                              leftDotColor: Colorsapp.mainColor,                              rightDotColor: Colorsapp.SecondColor,                              //color: Colorsapp.mainColor,                            ),                          ),                        );                      }                      )                    ],                  ),                ) : Center(                  child: LoadingAnimationWidget.flickr(                    size: 100,                    leftDotColor: Colorsapp.mainColor,                    rightDotColor: Colorsapp.SecondColor,                    //color: Colorsapp.mainColor,                  ),                );              }          ),        ),        Obx(           () {            return toggle_offset.value==true?Padding(              padding: const EdgeInsets.all(8.0),              child: Align(                alignment: Alignment.bottomRight,                child: Container(                  decoration: BoxDecoration(                    shape: BoxShape.circle,                    color: Colorsapp.mainColor.withOpacity(0.3),                  ),                  child: IconButton(                    icon: const Icon(Icons.keyboard_arrow_up,                      size: 25,                    ),                    onPressed: () {                        _scrollController?.animateTo(                          0,                          duration: Duration(seconds: 1),                          curve: Curves.easeInOutSine,                        );                    },                    color: Colors.blue,                  ),                ),              ),            ):Container();          }        )      ],    );  }}