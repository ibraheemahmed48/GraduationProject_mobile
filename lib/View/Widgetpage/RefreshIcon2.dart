import 'package:flutter/material.dart';import '../../controler/method.dart';import '../../help/Colors.dart';class RefreshIcon2 extends StatelessWidget {  const RefreshIcon2({    Key? key,  }) : super(key: key);  @override  Widget build(BuildContext context) {    return Padding(      padding: const EdgeInsets.all(8.0),      child: Container(          decoration: BoxDecoration(            borderRadius: const BorderRadius.all(Radius.circular(10)),            color: Colorsapp.mainColor.withOpacity(0.3),          ),          width:MediaQuery.of(context).size.width/3,          height: MediaQuery.of(context).size.height/15,          child: IconButton(              color: Colorsapp.mainColor,              onPressed: () async {                await Methods.refreshData();              },              icon: RefreshIcon(onPressed: () {  },)          )),    );  }}class RefreshIcon extends StatefulWidget {  final VoidCallback onPressed;  const RefreshIcon({Key? key, required this.onPressed}) : super(key: key);  @override  _RefreshIconState createState() => _RefreshIconState();}class _RefreshIconState extends State<RefreshIcon>    with SingleTickerProviderStateMixin {  late AnimationController _controller;  bool _isAnimating = false;  @override  void initState() {    super.initState();    _controller = AnimationController(      vsync: this,      duration: Duration(milliseconds: 800),    );    _controller.stop();    _isAnimating = false;  }  @override  void dispose() {    _controller.dispose();    super.dispose();  }  Future<void> _toggleAnimation() async {    _controller.repeat();    await Methods.refreshData();    Future.delayed(const Duration(seconds: 1), () {      if (_controller.isAnimating) {        _controller.stop();      }    });    setState(() {      _isAnimating = !_isAnimating;    });  }  @override  Widget build(BuildContext context) {    return GestureDetector(      onTap: () {        widget.onPressed();        _toggleAnimation();      },      child: RotationTransition(        turns: Tween(begin: 0.0, end: 1.0).animate(_controller),        child: Icon(Icons.refresh,          size: 30,          color: Colorsapp.mainColor,        ),      ),    );  }}