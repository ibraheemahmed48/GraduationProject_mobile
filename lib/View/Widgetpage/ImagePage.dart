import 'package:cached_network_image/cached_network_image.dart';import 'package:flutter/material.dart';import 'package:get/get.dart';import '../../controler/method.dart';import '../../help/Colors.dart';import '../../help/text_style.dart';import '../home_page.dart';class ImagePage extends StatefulWidget {  final List imageUrls;  final String time;  final String title;  final int indexOF;  ImagePage({required this.imageUrls, required this.time, required this.title, required this.indexOF});  @override  _ImagePageState createState() => _ImagePageState();}class _ImagePageState extends State<ImagePage> {  bool _isBottomSheetOpen = false;  ScrollController? _scrollController;  bool _isAppBarCollapsed = false;  int _currentPageIndex = 0;  RxInt index1 = 0.obs;  @override  void initState() {    super.initState();    _scrollController = ScrollController();    _scrollController?.addListener(_handleScroll);  }  @override  void dispose() {    _scrollController?.dispose();    super.dispose();  }  void _handleScroll() {    if (_scrollController!.offset > 100 && !_isAppBarCollapsed) {      setState(() {        _isAppBarCollapsed = true;      });    } else if (_scrollController!.offset <= 100 && _isAppBarCollapsed) {      setState(() {        _isAppBarCollapsed = false;      });    }  }  @override  Widget build(BuildContext context) {    return Scaffold(      backgroundColor: Colorsapp.mainColor.withOpacity(0.7),          body: SafeArea(        child: Stack(          children: [            PageView.builder(              controller: PageController(initialPage: widget.indexOF==null?0 :widget.indexOF),              scrollDirection: Axis.horizontal,              reverse: true,                onPageChanged: (int index1) {                  setState(() {                  });                },              allowImplicitScrolling: false,                itemCount: widget.imageUrls.length,                itemBuilder: (BuildContext context , int index){                print("index ${index}");                index1.value = index;                print("indexfdgg ${index1.value}");                  return Center(                      child: GestureDetector(                        onTap: () {                          print("${widget.imageUrls[index]}");                          setState(() {                              });                          print("${_isBottomSheetOpen}");                          _isBottomSheetOpen=!_isBottomSheetOpen;                          print("${_isBottomSheetOpen}");                        },                        child: InteractiveViewer(                            minScale:1,                            maxScale: 5,                            child: CachedNetworkImage(                              imageUrl: widget.imageUrls[index],                              fit: BoxFit.contain,                              placeholder: (context, url) => const Center(                                child: CircularProgressIndicator(),                              ),                              errorWidget: (context, url, error) => const Icon(Icons.error),                            )),                      )                  );                }),            Align(                alignment: Alignment.topCenter,                child: AnimatedContainer(                  decoration: BoxDecoration(                    color: Colorsapp.mainColor.withOpacity(0.3),                    borderRadius: const BorderRadius.only(                      bottomRight: Radius.circular(10.0),                      bottomLeft: Radius.circular(10.0),                    ),                  ),                  duration: const Duration(milliseconds: 300),                  height: _isBottomSheetOpen ? 50.0 : 0,                  child: _isBottomSheetOpen                      ? Padding(                    padding: const EdgeInsets.all(8.0),                    child: Center(                      child: Row(                        crossAxisAlignment: CrossAxisAlignment.center,                        mainAxisAlignment: MainAxisAlignment.spaceBetween,                        children: [                          IconButton(                              onPressed: () async {                                if(widget.title == "الاخبار"){                                  Get.to(const HomePage(indexOF: 0,), transition: Transition.fadeIn,duration: const Duration(milliseconds: 200));                                }else{                                  Get.to(const HomePage(indexOF: 1,), transition: Transition.fadeIn,duration: const Duration(milliseconds: 200));                                }                              }, icon: Icon(Icons.arrow_back_ios,size: 25,                            color: Colorsapp.White.withOpacity(0.7),                          )),                         Padding(                                padding: const EdgeInsets.only(top: 5),                                child: Text("${index1.value+1} من ${widget.imageUrls.length}" ,                                      textDirection:                                      TextDirection.rtl,                                      style: Text_Style.getstyle(                                        fontWeight:                                        FontWeight.w500,                                        ColorText:                                        Colorsapp.White.withOpacity(1),                                        fontsize:                                        MediaQuery                                            .of(context)                                            .size                                            .width / 20,                                      ),                                    )                          ),                          //////////////////////////////                          IconButton(onPressed: () async {                            print("widget.imageUrl.toString()");                            print(widget.imageUrls[index1.value].toString());                            await Methods.getHttp(url:widget.imageUrls[index1.value]);                          }, icon: Icon(Icons.download,size: 25,                            color: Colorsapp.White.withOpacity(0.7),                          )),                        ],                      ),                    ),                  )                      : null,                )),            Align(              alignment: Alignment.bottomCenter,              child: AnimatedContainer(                decoration: BoxDecoration(                  color: Colorsapp.mainColor.withOpacity(0.3),                  borderRadius: const BorderRadius.only(                    topRight: Radius.circular(10.0),                    topLeft: Radius.circular(10.0),                  ),                ),                duration: const Duration(milliseconds: 300),                height: _isBottomSheetOpen ? 50.0 : 0,                child: _isBottomSheetOpen                    ? Padding(                  padding: const EdgeInsets.all(8.0),                  child: Center(                    child: Row(                      mainAxisAlignment: MainAxisAlignment.spaceBetween,                      children: [                        Text(                          widget.time,                          textDirection:                          TextDirection.ltr,                          style: Text_Style.getstyle(                            fontWeight:                            FontWeight.w500,                            ColorText:                            Colorsapp.White.withOpacity(0.7),                            fontsize:                            MediaQuery                                .of(context)                                .size                                .width / 25,                          ),                        ),                        Text(                          "${widget.title}",                          textDirection:                          TextDirection.ltr,                          style: Text_Style.getstyle(                            fontWeight:                            FontWeight.w700,                            ColorText:                            Colorsapp.White.withOpacity(0.7),                            fontsize:                            MediaQuery                                .of(context)                                .size                                .width / 25,                          ),                        ),                      ],                    ),                  ),                )                    : null,              ),            ),          ],        ),      ),    );  }}