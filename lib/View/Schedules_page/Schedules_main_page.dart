import 'package:cached_network_image/cached_network_image.dart';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/material.dart';import 'package:flutter_svg/svg.dart';import 'package:get/get.dart';import 'package:loading_animation_widget/loading_animation_widget.dart';import 'package:notificationsystem_mobile/controler/auth/Account.dart';import 'package:notificationsystem_mobile/controler/method.dart';import '../../help/Colors.dart';import '../../help/text_style.dart';import '../News_page/Divider.dart';import '../Widgetpage/ImagePage.dart';import '../Widgetpage/RefreshIcon2.dart';class Schedules_main_page extends StatefulWidget {  const Schedules_main_page({Key? key}) : super(key: key);  @override  State<Schedules_main_page> createState() => _Schedules_main_pageState();}class _Schedules_main_pageState extends State<Schedules_main_page> {  @override  void initState() {    print("(((((((((((((((((((((((((((((((((((((Schedules_main_page))))))))))))))))))))))))))))))))");    //Methods.Schedules_post.value = false;    // TODO: implement initState Methods.getNews1();  }  RxBool openImage = false.obs;  RxString imageurl = "".obs;  Uri? _url;  @override  Widget build(BuildContext context) {    return Padding(      padding: const EdgeInsets.all(8.0),      child: Obx(         () {      return Methods.getlocaldata==true?Center(        child: Column(          mainAxisAlignment: MainAxisAlignment.start,          children: [            Row(              mainAxisAlignment: MainAxisAlignment.spaceAround,              children: [                Text(                  "MTCE",                  style: Text_Style.getstyle(                    fontWeight: FontWeight.w500,                    ColorText: Colorsapp.mainColor,                    fontsize: MediaQuery.of(context).size.width / 15,                  ),                ),                Text(                  " جدول المرحلة ${Account.stage}",                  style: Text_Style.getstyle(                    fontWeight: FontWeight.w500,                    ColorText: Colorsapp.mainColor,                    fontsize: MediaQuery.of(context).size.width / 15,                  ),                ),              ],            ),            MyDivider1(              width: MediaQuery.of(context).size.width / 1.1,              height: 3,            ),            const SizedBox(              height: 10,            ),                  Obx(() {                    return Methods.Schedules_post.value == true                        ? Obx(() {                      return Methods.Schedules_List.value.isNotEmpty                          ? Expanded(                        child: ListView.builder(                            reverse: false,                            itemCount: Methods.Schedules_List.length,                            itemBuilder:                                (BuildContext context, int index) {                                  final SchedulesIndex = Methods.Schedules_List.length - index - 1;                                  return Padding(                                padding: const EdgeInsets.symmetric(                                    vertical: 5),                                child: Card(                                    elevation: 3,                                    shape: RoundedRectangleBorder(                                      borderRadius: BorderRadius.circular(10.0),                                    ),                                    child: Container(                                  width:                                  MediaQuery.of(context).size.width /                                      1.1,                                  //height: 500,                                  decoration: BoxDecoration(                                      borderRadius:                                      BorderRadius.circular(10),                                      color: Colorsapp.TextColor),                                  child: Column(                                    children: [                                      Container(                                        height: MediaQuery.of(context)                                            .size                                            .height /                                            20,                                        padding: const EdgeInsets.all(5),                                        decoration: BoxDecoration(                                            borderRadius:                                            BorderRadius.circular(10),                                            border: Border.all(                                                color:                                                Colorsapp.mainColor,                                                width: 2),                                            color: Colorsapp.White),                                        child: Row(                                          mainAxisAlignment:                                          MainAxisAlignment.end,                                          children: [                                        Padding(                                        padding:                                        const EdgeInsets                                            .only(                                            top: 4),                                  child: Text(                                    "${Methods.Schedules_List[SchedulesIndex]["Stages"]}",                                    textDirection:                                    TextDirection                                        .ltr,                                    style: Text_Style                                        .getstyle(                                      fontWeight:                                      FontWeight                                          .w600,                                      ColorText: Colorsapp                                          .SecondColor,                                      fontsize: MediaQuery.of(                                          context)                                          .size                                          .width /                                          22,                                    ),                                  ),                                ),                                            Text(                                              " : المرحلة",                                              textDirection:                                              TextDirection.ltr,                                              style: Text_Style.getstyle(                                                fontWeight:                                                FontWeight.w700,                                                ColorText:                                                Colorsapp.mainColor,                                                fontsize:                                                MediaQuery.of(context)                                                    .size                                                    .width /                                                    20,                                              ),                                            ),                                          ],                                        ),                                      ),                                      Padding(                                        padding:                                        const EdgeInsets.all(8.0),                                        child: Align(                                            alignment:                                            Alignment.centerRight,                                            child: Text(                                              Methods.Schedules_List[SchedulesIndex]["Title"].toString(),                                              textDirection:                                              TextDirection.rtl,                                              style: Text_Style.getstyle(                                                fontWeight:                                                FontWeight.w600,                                                ColorText:                                                Colorsapp.redColor,                                                fontsize:                                                MediaQuery.of(context)                                                    .size                                                    .width /                                                    20,                                              ),                                            )),                                      ),                                      if (Methods.Schedules_List[SchedulesIndex]["Images"].isNotEmpty)                                        Container(                                            width: MediaQuery.of(context).size.width,                                            height: 300,                                            child: Padding(                                              padding:                                              const EdgeInsets.all(5.0),                                              child: Container(                                                  decoration: BoxDecoration(                                                      color: Colors                                                          .white,                                                      borderRadius:                                                      BorderRadius.circular(                                                          10),                                                      border: Border.all(                                                          color: Colorsapp                                                              .mainColor,                                                          width:                                                          2)),                                                  child:                                                  GestureDetector(                                                    onTap: (){                                                      print(Methods.Schedules_List[SchedulesIndex]["Images"].toString());                                                      imageurl.value =Methods.Schedules_List[SchedulesIndex]["Images"].toString();                                                      Get.to(ImagePage(                                                        imageUrls:  [(Methods.Schedules_List[SchedulesIndex]["Images"].toString())],                                                        time: Methods.Schedules_List.value[SchedulesIndex]["time"].toString(),                                                        title: Methods.Schedules_List[SchedulesIndex]["type"].toString(),                                                        indexOF: 0,),                                                          transition: Transition.fadeIn);                                                    },                                                    child: ClipRRect(                                                        borderRadius:                                                        BorderRadius.circular(                                                            8),                                                        child: CachedNetworkImage(                                                          imageUrl: Methods.Schedules_List[SchedulesIndex]["Images"].toString(),                                                          fit:BoxFit.contain,                                                          fadeInDuration: const Duration(seconds: 1),                                                          errorWidget: (context, url, error) {                                                            return SizedBox(                                                              height: 300,                                                              width: 200,                                                              child: Icon(Icons.image_not_supported,                                                                size: MediaQuery.of(context).size.width/4,                                                                color: Colors.blueGrey.withOpacity(0.3),                                                              ),                                                            );                                                          },                                                        )                                                    ),                                                  )),                                            ),                                        ),                                      Padding(                                        padding:                                        const EdgeInsets.all(0.0),                                        child: Align(                                            alignment:                                            Alignment.center,                                            child: Text(                                              Methods.Schedules_List[SchedulesIndex]["type"].toString(),                                              textDirection:                                              TextDirection.rtl,                                              style: Text_Style.getstyle(                                                fontWeight:                                                FontWeight.w500,                                                ColorText:                                                Colorsapp.mainColor,                                                fontsize:                                                MediaQuery.of(context)                                                    .size                                                    .width /                                                    20,                                              ),                                            )),                                      ),                                      Padding(                                        padding: const EdgeInsets.all(8.0),                                        child: Align(                                            alignment:                                            Alignment.centerLeft,                                            child: Text(                                              Methods.Schedules_List[SchedulesIndex]["time"].toString(),                                              textDirection:                                              TextDirection.ltr,                                              style: Text_Style.getstyle(                                                fontWeight:                                                FontWeight.w400,                                                ColorText:                                                Colorsapp.redColor,                                                fontsize:                                                MediaQuery.of(context).size.width / 27,                                              ),                                            )),                                      ),                                      Container(                                        height: MediaQuery.of(context)                                            .size                                            .height /                                            20,                                        padding: const EdgeInsets.all(0),                                        decoration: BoxDecoration(                                            borderRadius:                                            const BorderRadius.only(                                              topRight:                                              Radius.circular(10),                                              topLeft:                                              Radius.circular(10),                                              bottomLeft:                                              Radius.circular(10),                                              bottomRight:                                              Radius.circular(10),                                            ),                                            color: Colorsapp.White),                                        child: Row(                                          mainAxisAlignment: MainAxisAlignment.spaceBetween,                                          crossAxisAlignment: CrossAxisAlignment.center,                                           children: [                                            Row(                                              mainAxisAlignment: MainAxisAlignment.spaceBetween,                                              crossAxisAlignment: CrossAxisAlignment.center,                                              children: [                                                IconButton(                                                  icon: Obx(                                                          () {                                                        return Icon(                                                          Icons.thumb_down,                                                          size: 20,                                                          color: Methods.Schedules_listdislikesflag[SchedulesIndex] == true                                                              ? Colors.lightBlue                                                              : Colorsapp.TextColor,                                                        );                                                      }                                                  ),                                                  onPressed: () async {                                                      if (Methods.Schedules_listdislikesflag[SchedulesIndex] == false) {                                                        Methods.Schedules_listdislikesflag[SchedulesIndex] = true;                                                        await FirebaseFirestore.instance.collection('Schedules').doc(Methods.Schedules_List[SchedulesIndex].id)                                                            .update({'dislikes': FieldValue.arrayUnion([                                                          Account.documentID                                                        ])                                                        });                                                      } else {                                                        Methods.Schedules_listdislikesflag[SchedulesIndex] = false;                                                        await FirebaseFirestore.instance.collection('Schedules').doc(Methods.Schedules_List[SchedulesIndex].id)                                                            .update({'dislikes': FieldValue.arrayRemove([                                                          Account.documentID                                                        ])                                                        });                                                      }                                                      if (Methods.Schedules_listlikesflag[SchedulesIndex] == true) {                                                        Methods.Schedules_listlikesflag[SchedulesIndex] = false;                                                        await FirebaseFirestore.instance.collection('Schedules').doc(Methods.Schedules_List[SchedulesIndex].id)                                                            .update({'likes': FieldValue.arrayRemove([                                                          Account.documentID                                                        ])                                                        });                                                      }                                                      if (Methods.Schedules_listfavoritesflag[SchedulesIndex] == true) {                                                        Methods.Schedules_listfavoritesflag[SchedulesIndex] = false;                                                        await FirebaseFirestore.instance.collection('Schedules').doc(Methods.Schedules_List[SchedulesIndex].id)                                                            .update({'favorites': FieldValue.arrayRemove([                                                          Account.documentID                                                        ])                                                        });                                                      }                                                  },                                                ),                                                IconButton(                                                  icon: Obx(                                                          () {                                                        return Icon(                                                          Icons.thumb_up,                                                          size: 20,                                                          color: Methods.Schedules_listlikesflag[SchedulesIndex] == true                                                              ? Colors.blue                                                              : Colorsapp.TextColor,                                                        );                                                      }                                                  ),                                                  onPressed: () async {                                                      if (Methods.Schedules_listlikesflag[SchedulesIndex] == false) {                                                        Methods.Schedules_listlikesflag[SchedulesIndex] = true;                                                        await FirebaseFirestore.instance.collection('Schedules').doc(Methods.Schedules_List[SchedulesIndex].id)                                                            .update({'likes': FieldValue.arrayUnion([                                                          Account.documentID                                                        ])                                                        });                                                      } else {                                                        Methods.Schedules_listlikesflag[SchedulesIndex] = false;                                                        await FirebaseFirestore.instance.collection('Schedules').doc(Methods.Schedules_List[SchedulesIndex].id)                                                            .update({'likes': FieldValue.arrayRemove([Methods.studentNmae])                                                        });                                                      }                                                      if (Methods.Schedules_listfavoritesflag[SchedulesIndex] == true) {                                                        Methods.Schedules_listfavoritesflag[SchedulesIndex] = false;                                                        await FirebaseFirestore.instance.collection('Schedules').doc(Methods.Schedules_List[SchedulesIndex].id)                                                            .update({'favorites': FieldValue.arrayRemove([                                                          Account.documentID                                                        ])                                                        });                                                      }                                                      if (Methods.Schedules_listdislikesflag[SchedulesIndex] == true) {                                                        Methods.Schedules_listdislikesflag[SchedulesIndex] = false;                                                        await FirebaseFirestore.instance.collection('Schedules').doc(Methods.Schedules_List[SchedulesIndex].id)                                                            .update({'dislikes': FieldValue.arrayRemove([                                                          Account.documentID                                                        ])                                                        });                                                      }                                                  },                                                ),                                                IconButton(                                                    icon: Obx(                                                            () {                                                          return Icon(                                                            Icons.favorite,                                                            size: 20,                                                            color: Methods.Schedules_listfavoritesflag[SchedulesIndex] == true                                                                ? Colorsapp.redColor                                                                : Colorsapp.TextColor,                                                          );                                                        }                                                    ),                                                    onPressed:                                                        () async {                                                            if (Methods.Schedules_listdislikesflag[SchedulesIndex] == true) {                                                              Methods.Schedules_listdislikesflag[SchedulesIndex] = false;                                                              await FirebaseFirestore.instance.collection('Schedules').doc(Methods.Schedules_List[SchedulesIndex].id).update({                                                                'dislikes': FieldValue.arrayRemove([                                                                  Account.documentID                                                                ])                                                              });                                                            }                                                            if (Methods.Schedules_listlikesflag[SchedulesIndex] == true) {                                                              Methods.Schedules_listlikesflag[SchedulesIndex] = false;                                                              await FirebaseFirestore.instance.collection('Schedules').doc(Methods.Schedules_List[SchedulesIndex].id)                                                                  .update({'likes': FieldValue.arrayRemove([                                                                Account.documentID                                                              ])                                                              });                                                            }                                                            if (Methods.Schedules_listfavoritesflag[SchedulesIndex] == false) {                                                              Methods.Schedules_listfavoritesflag[SchedulesIndex] = true;                                                              await FirebaseFirestore.instance.collection('Schedules').doc(Methods.Schedules_List[SchedulesIndex].id)                                                                  .update({'favorites': FieldValue.arrayUnion([                                                                Account.documentID                                                              ])                                                              });                                                            } else {                                                              Methods.Schedules_listfavoritesflag[SchedulesIndex] = false;                                                              await FirebaseFirestore.instance.collection('Schedules').doc(Methods.Schedules_List[SchedulesIndex].id)                                                                  .update({'favorites':FieldValue.arrayRemove([                                                                Account.documentID                                                              ])                                                              });                                                            }                                                    }),                                              ],                                            ),                                            Padding(                                              padding:                                              const EdgeInsets.only(                                                  right: 8, top:0),                                              child: Column(                                                mainAxisAlignment: MainAxisAlignment.center,                                                children: [                                                  Text(                                                    Methods.Schedules_List[SchedulesIndex]["author"].toString().substring(0, (Methods.Schedules_List[SchedulesIndex]["author"].toString().length > 20) ? 20 : (Methods.Schedules_List[SchedulesIndex]["author"].toString().length)),                                                    textDirection:                                                    TextDirection                                                        .rtl,                                                    style: Text_Style                                                        .getstyle(                                                      fontWeight:                                                      FontWeight                                                          .w600,                                                      ColorText:                                                      Colorsapp                                                          .redColor,                                                      fontsize: MediaQuery.of(                                                          context)                                                          .size                                                          .width /                                                          25,                                                    ),                                                  ),                                                ],                                              ),                                            ),                                          ],                                        ),                                      ),                                    ],                                  ),                                )),                              );                            }),                      )                          : Column(                        children: [                          Container(                            width:MediaQuery.of(context).size.width/1.2,                            height: MediaQuery.of(context).size.height/2,                            child: SvgPicture.asset(                              "photo/No data-cuate2.svg",                            ),                          ),                          Text(                            "لا يوجد جدول",                            style: Text_Style.getstyle(                              fontWeight: FontWeight.w700,                              ColorText: Colorsapp.mainColor,                              fontsize:                              MediaQuery.of(context).size.width / 15,                            ),                          ),                          const RefreshIcon2()                        ],                      );                    })                        : Padding(                      padding: EdgeInsets.only(                          top: MediaQuery.of(context).size.height / 2.8),                      child: Center(                        child: LoadingAnimationWidget.flickr(                          size: 100,                          leftDotColor: Colorsapp.mainColor,                          rightDotColor: Colorsapp.SecondColor,                          //color: Colorsapp.mainColor,                        ),                      ),                    );                }            )          ],        ),      ):Center(        child: LoadingAnimationWidget.flickr(          size: 100,          leftDotColor: Colorsapp.mainColor,          rightDotColor: Colorsapp.SecondColor,          //color: Colorsapp.mainColor,        ),      );        }      ),    );  }}