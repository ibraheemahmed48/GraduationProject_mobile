import 'package:another_flushbar/flushbar.dart';import 'package:firebase_messaging/firebase_messaging.dart';import 'package:flutter/material.dart';import 'package:flutter_snake_navigationbar/flutter_snake_navigationbar.dart';import 'package:notificationsystem_mobile/View/profile/Profile_main_page.dart';import 'package:notificationsystem_mobile/controler/auth/auth.dart';import 'package:notificationsystem_mobile/controler/method.dart';import '../FirebaseMessagingService/FirebaseMessagingService.dart';import '../controler/auth/Account.dart';import '../help/Colors.dart';import '../help/text_style.dart';import 'News_page/News_main_page.dart';import 'Schedules_page/Schedules_main_page.dart';import 'notificationPage/Notification_main_page.dart';class HomePage extends StatefulWidget {  final int indexOF;  const HomePage({super.key, required this.indexOF});  @override  _HomePageState createState() => _HomePageState(indexOF);}class _HomePageState extends State<HomePage> {  ShapeBorder? bottomBarShape = const RoundedRectangleBorder(    borderRadius: BorderRadius.only(      topRight: Radius.circular(25),      topLeft:Radius.circular(25), ),  );  SnakeBarBehaviour snakeBarStyle = SnakeBarBehaviour.pinned;  int _selectedItemPosition = 0;  SnakeShape snakeShape = SnakeShape.circle;  bool showSelectedLabels = true;  bool showUnselectedLabels = false;  Color selectedColor = Colorsapp.mainColor;  Color unselectedColor = Colors.blueGrey;  Color? containerColor;  ///////////////////////////////////////////////  static const TextStyle optionStyle =  TextStyle(fontSize: 30, fontWeight: FontWeight.w600);  static  final List<Widget> _widgetOptions = <Widget>[    const News_main_page(),    const Schedules_main_page(),     const Notification_main_page(),    const Profile_main_page(),  ];  _HomePageState(index1);  @override  void initState() {    print("###################################Home page#########################");    //UserPreferences.getstage();    _selectedItemPosition = widget.indexOF;   Future.delayed(Duration(seconds: 0)).then((value) async => {   }).then((value) => {         Methods.getlocaldata.value=true,   });   print("/////////////////////");   FirebaseMessaging.onMessage.listen((RemoteMessage message) async {     print('//////////////////////onMessage////////////////////////////////');     if (message.notification != null) {       print("Methods.stage: ${Methods.stage}");       print("Methods.Stagesfield: ${Methods.Stagesfield}");       FirebaseMessagingService.onMessage.value=true;       print("/////////////////////////////////getCollectionByField///////////////////////////////////////////");       print('Got a message with time: ${message.notification?.title!}');       print('Got a message with time: ${message.data["time"]}');       Methods.reversedtime(           oldtime: message.data["time"],           studentName: Account.name,           stage: Account.stage,           title: message.notification!.body!);       Flushbar(         duration: const Duration(seconds: 4),         borderRadius: BorderRadius.circular(10),         borderColor: Colorsapp.mainColor,         backgroundColor: Colorsapp.TextColor,         progressIndicatorBackgroundColor: Colorsapp.SecondColor,         borderWidth: 1,         titleSize: 25,         barBlur: 6,         margin: EdgeInsets.symmetric(horizontal: 20, vertical: 15),         padding: EdgeInsets.symmetric(horizontal: 10, vertical: 10),         boxShadows: [           BoxShadow(             color: Colorsapp.mainColor,             offset: const Offset(0.0, 1.5),             blurRadius: 1.5,           ),         ],         flushbarPosition: FlushbarPosition.TOP,         dismissDirection: FlushbarDismissDirection.HORIZONTAL,         forwardAnimationCurve: Curves.fastLinearToSlowEaseIn,         reverseAnimationCurve: Curves.fastOutSlowIn,         icon: Icon(           Icons.notifications,           color: Colorsapp.SecondColor,           size: 28,         ),         shouldIconPulse: false,         titleText: Text(             '${message.notification?.title}',             textDirection: TextDirection.rtl,             textAlign: TextAlign.right,             style: Text_Style.getstyle(                 fontsize: 20,                 ColorText: Colorsapp.mainColor,                 fontWeight: FontWeight.w700             )         ),         messageText: Text(             (message.notification?.body!.length)! > 106 ?             "${message.notification?.body?.substring(0,106)}....":             '${message.notification?.body}',             textDirection: TextDirection.rtl,             textAlign: TextAlign.right,             style: Text_Style.getstyle(                 fontsize: 16,                 ColorText: Colorsapp.mainColor,                 fontWeight: FontWeight.w500             )         ),       ).show(context);     }   });    // TODO: implement initState    super.initState();  }  @override  Widget build(BuildContext context) {    return SafeArea(        child: Scaffold(      backgroundColor: Colors.white,      body: RefreshIndicator(       color: Colorsapp.SecondColor,          backgroundColor: Colors.white,          onRefresh: Methods.refreshData2,          child: _widgetOptions.elementAt(_selectedItemPosition)),      bottomNavigationBar: SnakeNavigationBar.color(        height: 55,        elevation: 50,        behaviour: snakeBarStyle,        snakeShape: snakeShape,        shape: bottomBarShape,        padding: EdgeInsets.zero,        ///configuration for SnakeNavigationBar.color        snakeViewColor: selectedColor,        selectedItemColor:        snakeShape == SnakeShape.indicator ? selectedColor : null,        unselectedItemColor: unselectedColor,        showUnselectedLabels: showUnselectedLabels,        showSelectedLabels: showSelectedLabels,        currentIndex: _selectedItemPosition,        onTap: (index) {          setState(() => _selectedItemPosition = index);        } ,        items: const [          BottomNavigationBarItem(              icon: Icon(Icons.newspaper_sharp),              label: 'tickets'),          BottomNavigationBarItem(              icon: Icon(Icons.calendar_today), label: ''),          BottomNavigationBarItem(              icon: Icon(Icons.notifications), label: ''),          BottomNavigationBarItem(              icon: Icon(Icons.person), label: ''),        ],        selectedLabelStyle: const TextStyle(fontSize: 14),        unselectedLabelStyle: const TextStyle(fontSize: 10),      ),    ));  }}